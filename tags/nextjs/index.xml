<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nextjs on rapradiptya | Blog</title>
    <link>https://rapradiptya.net/tags/nextjs/</link>
    <description>Recent content in nextjs on rapradiptya | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Aug 2023 20:16:53 +0700</lastBuildDate><atom:link href="https://rapradiptya.net/tags/nextjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zustand: Easiest Way for React State Management</title>
      <link>https://rapradiptya.net/zustand-state-management-tool/</link>
      <pubDate>Thu, 17 Aug 2023 20:16:53 +0700</pubDate>
      
      <guid>https://rapradiptya.net/zustand-state-management-tool/</guid>
      <description>State management is one of the most important concepts in React world. As React components render and update, they rely on state to manage and reflect changes in data and UI elements. While Redux has dominated the state management landscape for years, developers are now seeking more straightforward and lightweight solutions like Zustand.
Why you should learn Zustand? One of Zustand’s standout features is its minimalist API, designed to streamline state management in React components.</description>
    </item>
    
    <item>
      <title>Server-Side Rendering (SSR) Vs Client-Side Rendering (CSR)</title>
      <link>https://rapradiptya.net/server-side-rendering-vs-client-side-rendering/</link>
      <pubDate>Tue, 27 Jun 2023 16:32:13 +0700</pubDate>
      
      <guid>https://rapradiptya.net/server-side-rendering-vs-client-side-rendering/</guid>
      <description>In the web development world, choosing the right rendering approach is crucial for building performant and user-friendly applications. Two popular methods, server-side rendering (SSR) and client-side rendering (CSR), offer distinct advantages and trade-offs. Understanding the differences between these approaches can help you make an informed decision based on your project requirements.
Server-side Rendering (SSR) Server-side rendering is a technique in which web pages are rendered on the server and sent to the client as fully-formed HTML documents.</description>
    </item>
    
    <item>
      <title>Building Role-Based Authentication with Next.js and Prisma</title>
      <link>https://rapradiptya.net/role-based-auth-prisma-next-auth/</link>
      <pubDate>Mon, 22 May 2023 15:32:37 +0700</pubDate>
      
      <guid>https://rapradiptya.net/role-based-auth-prisma-next-auth/</guid>
      <description>In this blog post, we’ll walk you through the step-by-step process of creating role-based authentication for your Next.js application using Next Auth and Prisma adapter. You’ll have a solid foundation to build flexible and scalable user access control systems by the end.
In the project, we’ll be using Next.js App Directory. As you know, after Next.js 13, we create API routes using the App directory and route files.
Let’s install the authentication library and start creating the auth API route.</description>
    </item>
    
    <item>
      <title>Next.js vs Express: Which one is Better for a Backend Server?</title>
      <link>https://rapradiptya.net/nextjs-vs-express/</link>
      <pubDate>Tue, 11 Apr 2023 02:45:45 +0700</pubDate>
      
      <guid>https://rapradiptya.net/nextjs-vs-express/</guid>
      <description>Two popular frameworks, Next.js and Express, serve different features and purposes. In this blog post, we will explore the differences between Next.js and Express and discuss when and why you might choose one over the other.
Purpose os Next.js Next.js is a powerful framework built on top of React, focusing on server-rendered and statically generated React applications. It provides a structure for building complex, dynamic web applications and offers features like automatic code splitting, server-side rendering (SSR), and static site generation (SSG).</description>
    </item>
    
  </channel>
</rss>
