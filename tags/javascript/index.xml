<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on rapradiptya | Blog</title>
    <link>https://rapradiptya.net/tags/javascript/</link>
    <description>Recent content in javascript on rapradiptya | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Oct 2023 13:41:40 +0700</lastBuildDate><atom:link href="https://rapradiptya.net/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Think Twice When Using &#39;&amp;&amp;&#39; Operator for Conditional Rendering</title>
      <link>https://rapradiptya.net/js-and-operator-pitfalls/</link>
      <pubDate>Sat, 21 Oct 2023 13:41:40 +0700</pubDate>
      
      <guid>https://rapradiptya.net/js-and-operator-pitfalls/</guid>
      <description>Conditional operators play a crucial role in decision-making and controlling the flow of execution. And one of the most popular operator in Javascript is &amp;amp;&amp;amp;. Although seemingly convenient, it might cause some logical errors.
Let’s see the pitfalls of using the &amp;amp;&amp;amp; operator and explore alternative approaches that can reduce potential issues.
const Component = (isOpen) =&amp;gt; { return ( &amp;lt;div&amp;gt; // when isOpen is true show the modal  {isOpen &amp;amp;&amp;amp; &amp;lt;div id=&amp;#34;modal&amp;#34;&amp;gt;This is a Modal&amp;lt;/div&amp;gt;} &amp;lt;/div&amp;gt; ); }; In the example, if the isOpen variable is true, the modal div will be displayed on the screen, and if it’s false, the modal div won’t be rendered.</description>
    </item>
    
    <item>
      <title>Zustand: Easiest Way for React State Management</title>
      <link>https://rapradiptya.net/zustand-state-management-tool/</link>
      <pubDate>Thu, 17 Aug 2023 20:16:53 +0700</pubDate>
      
      <guid>https://rapradiptya.net/zustand-state-management-tool/</guid>
      <description>State management is one of the most important concepts in React world. As React components render and update, they rely on state to manage and reflect changes in data and UI elements. While Redux has dominated the state management landscape for years, developers are now seeking more straightforward and lightweight solutions like Zustand.
Why you should learn Zustand? One of Zustand’s standout features is its minimalist API, designed to streamline state management in React components.</description>
    </item>
    
    <item>
      <title>Server-Side Rendering (SSR) Vs Client-Side Rendering (CSR)</title>
      <link>https://rapradiptya.net/server-side-rendering-vs-client-side-rendering/</link>
      <pubDate>Tue, 27 Jun 2023 16:32:13 +0700</pubDate>
      
      <guid>https://rapradiptya.net/server-side-rendering-vs-client-side-rendering/</guid>
      <description>In the web development world, choosing the right rendering approach is crucial for building performant and user-friendly applications. Two popular methods, server-side rendering (SSR) and client-side rendering (CSR), offer distinct advantages and trade-offs. Understanding the differences between these approaches can help you make an informed decision based on your project requirements.
Server-side Rendering (SSR) Server-side rendering is a technique in which web pages are rendered on the server and sent to the client as fully-formed HTML documents.</description>
    </item>
    
    <item>
      <title>Next.js vs Express: Which one is Better for a Backend Server?</title>
      <link>https://rapradiptya.net/nextjs-vs-express/</link>
      <pubDate>Tue, 11 Apr 2023 02:45:45 +0700</pubDate>
      
      <guid>https://rapradiptya.net/nextjs-vs-express/</guid>
      <description>Two popular frameworks, Next.js and Express, serve different features and purposes. In this blog post, we will explore the differences between Next.js and Express and discuss when and why you might choose one over the other.
Purpose os Next.js Next.js is a powerful framework built on top of React, focusing on server-rendered and statically generated React applications. It provides a structure for building complex, dynamic web applications and offers features like automatic code splitting, server-side rendering (SSR), and static site generation (SSG).</description>
    </item>
    
  </channel>
</rss>
