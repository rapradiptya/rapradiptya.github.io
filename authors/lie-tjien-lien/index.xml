<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lie Tjien Lien on rapradiptya | Blog</title>
    <link>https://rapradiptya.net/authors/lie-tjien-lien/</link>
    <description>Recent content in Lie Tjien Lien on rapradiptya | Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Oct 2023 13:41:40 +0700</lastBuildDate><atom:link href="https://rapradiptya.net/authors/lie-tjien-lien/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Think Twice When Using &#39;&amp;&amp;&#39; Operator for Conditional Rendering</title>
      <link>https://rapradiptya.net/js-and-operator-pitfalls/</link>
      <pubDate>Sat, 21 Oct 2023 13:41:40 +0700</pubDate>
      
      <guid>https://rapradiptya.net/js-and-operator-pitfalls/</guid>
      <description>Conditional operators play a crucial role in decision-making and controlling the flow of execution. And one of the most popular operator in Javascript is &amp;amp;&amp;amp;. Although seemingly convenient, it might cause some logical errors.
Let’s see the pitfalls of using the &amp;amp;&amp;amp; operator and explore alternative approaches that can reduce potential issues.
const Component = (isOpen) =&amp;gt; { return ( &amp;lt;div&amp;gt; // when isOpen is true show the modal  {isOpen &amp;amp;&amp;amp; &amp;lt;div id=&amp;#34;modal&amp;#34;&amp;gt;This is a Modal&amp;lt;/div&amp;gt;} &amp;lt;/div&amp;gt; ); }; In the example, if the isOpen variable is true, the modal div will be displayed on the screen, and if it’s false, the modal div won’t be rendered.</description>
    </item>
    
    <item>
      <title>Building Role-Based Authentication with Next.js and Prisma</title>
      <link>https://rapradiptya.net/role-based-auth-prisma-next-auth/</link>
      <pubDate>Mon, 22 May 2023 15:32:37 +0700</pubDate>
      
      <guid>https://rapradiptya.net/role-based-auth-prisma-next-auth/</guid>
      <description>In this blog post, we’ll walk you through the step-by-step process of creating role-based authentication for your Next.js application using Next Auth and Prisma adapter. You’ll have a solid foundation to build flexible and scalable user access control systems by the end.
In the project, we’ll be using Next.js App Directory. As you know, after Next.js 13, we create API routes using the App directory and route files.
Let’s install the authentication library and start creating the auth API route.</description>
    </item>
    
  </channel>
</rss>
